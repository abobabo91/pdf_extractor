import streamlit as st
st.set_page_config(layout="wide")
import pandas as pd
import numpy as np
import os
import PyPDF2
import pdf2image
import pytesseract
from io import BytesIO
import openai
from openai import OpenAI
import tiktoken
import re

def count_tokens(text, model="gpt-4o"):
    encoder = tiktoken.encoding_for_model(model)
    tokens = encoder.encode(text)
    return len(tokens)

def replace_successive_duplicates(df, column_to_compare, columns_to_delete):
    result = df.copy()
    col = column_to_compare
    mask = result[col] == result[col].shift()
    for col in columns_to_delete:
        result.loc[mask, col] = np.nan
    return result

def extract_text_from_pdf(uploaded_file):
    """Megpr√≥b√°lja sz√∂vegesen kinyerni a PDF tartalm√°t, OCR-rel kieg√©sz√≠tve, ha sz√ºks√©ges."""
    file_name = uploaded_file.name
    pdf_content = ""

    try:
        pdf_reader = PyPDF2.PdfReader(uploaded_file)
        for page in pdf_reader.pages:
            pdf_content += page.extract_text() or ""
    except Exception as e:
        st.error(f"Hiba a(z) {file_name} f√°jl olvas√°sakor: {e}")
        return None

    if len(pdf_content.strip()) < 100:
        pdf_content = ""
        try:
            uploaded_file.seek(0)
            images = pdf2image.convert_from_bytes(uploaded_file.read(), poppler_path = r"C:\poppler-24.08.0\Library\bin")
            for img in images:
                pdf_content += pytesseract.image_to_string(img, lang="hun")
        except Exception as e:
            st.error(f"OCR hiba a(z) {file_name} f√°jln√°l: {e}")
            return None

    if len(pdf_content) > 500000:
        st.write(file_name + " t√∫l hossz√∫, csak az els≈ë 5000 karakter ker√ºl feldolgoz√°sra.")
        pdf_content = pdf_content[:5000]

    return pdf_content


def generate_gpt_prompt(text):
    """√ñssze√°ll√≠tja a promptot a GPT sz√°m√°ra."""
    return ("""I send you an extract of a pdf bill invoice in Hungarian. It may contain several invoices merged into one pdf. Your job is to find several data from the invoice/invoices: """ 
            + text +  """. Output the following in order: 
            1) the name of the seller, 
            2) the name of the buyer, 
            3) the invoice number, 
            4) the date of the invoice,
            5) the total gross amount of the full invoice, 
            6) the total net amount of the invoice, 
            7) the total VAT (√ÅFA in Hungarian) of the invoice,
            8) the currency used on the invoice (Ft or Eur),
            9) the HUF/EUR currency exchange rate (if the invoice is in Ft, then write 1).
            Be careful that in Hungarian the decimal separator is ',' instead of '.', and the thousands separator is '.', instead of ','.
            Output these 9 values (1, 2, 3, 4 and 8 as strings, 5, 6, 7 and 9 as integers) separated by ; and each invoice in new line as many invoices there are and nothing else!""")



def extract_data_with_gpt(file_name, text):
    """GPT-4o seg√≠ts√©g√©vel kinyeri a strukt√∫r√°lt adatokat a PDF sz√∂vegb≈ël ‚Äì ak√°r t√∂bb sz√°ml√°ra."""
    gpt_prompt = generate_gpt_prompt(text)

    try:
        client = OpenAI(api_key=openai.api_key)
        response = client.chat.completions.create(
            model='gpt-4o', 
            messages=[
                {"role": "system", "content": ""},
                {"role": "user", "content": gpt_prompt}],
            max_tokens=10000,
            temperature=0,
            timeout=30
        )

        raw_output = response.choices[0].message.content.strip()
        rows = raw_output.split("\n")

        parsed_rows = []
        for row in rows:
            parts = row.strip().split(";")
            if len(parts) != 9:
                st.warning(f"Hib√°s sor ({file_name}): {row}")
                continue

            # üßº Tiszt√≠tsuk meg az egyes mez≈ëket a felesleges prefixekt≈ël pl. "1) "
            cleaned_parts = [re.sub(r"^\s*\d+\)\s*", "", p.strip()) for p in parts]
            
            parsed_rows.append([file_name] + parts)

        return parsed_rows, count_tokens(gpt_prompt)

    except Exception as e:
        st.error(f"A GPT-4 feldolgoz√°s sikertelen volt: {file_name} ‚Äì {e}")
        return [], 0



# Inicializ√°ljuk a session state v√°ltoz√≥kat
if 'extracted_text_from_invoice' not in st.session_state:
    st.session_state.extracted_text_from_invoice = []
if 'extracted_data' not in st.session_state:
    st.session_state.extracted_data = []
if 'df_extracted' not in st.session_state:
    st.session_state.df_extracted = pd.DataFrame()
if 'df_minta' not in st.session_state:
    st.session_state.df_minta = pd.DataFrame()
if 'df_nav' not in st.session_state:
    st.session_state.df_nav = pd.DataFrame()
if 'df_karton' not in st.session_state:
    st.session_state.df_karton = pd.DataFrame()
if 'df_merged' not in st.session_state:
    st.session_state.df_merged = pd.DataFrame()
if 'df_merged_full' not in st.session_state:
    st.session_state.df_merged_full = pd.DataFrame()
if 'number_of_tokens' not in st.session_state:
    st.session_state.number_of_tokens = 0

openai.organization = "org-i7aicv7Qc0PO4hkTCT4N2BqR"
openai.api_key = st.secrets['openai']["OPENAI_API_KEY"]

st.title("üìÑ Sz√°mlaadat-kinyer≈ë alkalmaz√°s")

col_pdf, col_excel = st.columns([1, 1])  # nagyobb bal oldali has√°b

with col_pdf:
    st.subheader("üìÇ PDF-ek kinyer√©se")
    
    st.write("1) T√∂lts fel egy vagy t√∂bb **magyar nyelv≈± sz√°ml√°t (PDF)**, amelyekb≈ël a rendszer kiolvassa a legfontosabb adatokat.")
    
    # 0) F√°jl felt√∂lt≈ë
    uploaded_files = st.file_uploader("üì§ PDF f√°jlok felt√∂lt√©se", type=["pdf"], accept_multiple_files=True)
    
    # 1) PDF feldolgoz√°s
    if st.button("üìë Sz√∂vegkinyer√©s a PDF-b≈ël"):  
        st.session_state.extracted_text_from_invoice = []      
        if uploaded_files:
            if len(uploaded_files) > 100:
                st.write("‚ö†Ô∏è Az els≈ë 100 f√°jl ker√ºl feldolgoz√°sra.")
    
            for uploaded_file in uploaded_files[:100]:
                file_name = uploaded_file.name
                pdf_text = extract_text_from_pdf(uploaded_file)
    
                if pdf_text is None:
                    continue
    
                st.session_state.extracted_text_from_invoice.append([file_name, pdf_text])
        else:
            st.warning("‚ö†Ô∏è K√©rlek, t√∂lts fel legal√°bb egy PDF f√°jlt.")
    
        # 2) GPT adatkinyer√©s
        st.session_state.extracted_data = []
        if st.session_state.extracted_text_from_invoice:
            for file_name, pdf_content in st.session_state.extracted_text_from_invoice:
                extracted_rows, tokens = extract_data_with_gpt(file_name, pdf_content)
                if extracted_rows:
                    st.session_state.extracted_data.extend(extracted_rows)
                    st.session_state.number_of_tokens += tokens
                    st.write(f"{file_name} feldolgoz√°sa k√©sz.")

    
        if st.session_state.extracted_data:
            st.session_state.df_extracted = pd.DataFrame(
                st.session_state.extracted_data,
                columns=["F√°jln√©v", "Elad√≥", "Vev≈ë", "Sz√°mlasz√°m", "Sz√°mla kelte", "Brutt√≥ √°r", "Nett√≥ √°r", "√ÅFA", "Deviza", "√Årfolyam"]
            )
            st.session_state.df_extracted["Sz√°mlasz√°m"] = st.session_state.df_extracted["Sz√°mlasz√°m"].astype(str)
            st.session_state.df_extracted["1"] = np.nan

    
    if len(st.session_state.df_extracted) > 0:        
        st.write("‚úÖ **Adatok kinyerve!** Az al√°bbi t√°bl√°zat tartalmazza az eredm√©nyeket:")
        st.dataframe(st.session_state.df_extracted)
    
        extract_csv = st.session_state.df_extracted.to_csv(index=False).encode("utf-8")
        st.download_button("üì• Kinyert adatok let√∂lt√©se CSV-ben", extract_csv, "kinyert_adatok.csv", "text/csv", key="letoltes-csv")
        
        buffer = BytesIO()
        with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
            st.session_state.df_extracted.to_excel(writer, sheet_name='Adatok', index=False)
            writer.close()
            st.download_button(
                label="üì• Kinyert adatok let√∂lt√©se Excelben",
                data=buffer,
                file_name='kinyert_adatok.xlsx',
                mime='application/vnd.ms-excel'
            )


    # Token √°r becsl√©s
    price = st.session_state.number_of_tokens * 2.5 / 1_000_000
    st.write(f"üí∞ A becs√ºlt feldolgoz√°si k√∂lts√©g eddig: **${price:.4f}** (GPT-4o)")


with col_excel:
    
    st.subheader("üìÇ Excel f√°jlok bet√∂lt√©se")
    
    
    # --- Excel f√°jlok bet√∂lt√©se ---
    st.markdown("1) T√∂ltsd fel a **Mintav√©tel** Excel f√°jlt:")
    uploaded_excel_file_minta = st.file_uploader(
        "üì§ Mintav√©tel Excel felt√∂lt√©se",
        type=["xlsx"],
        accept_multiple_files=False,
        help="Az adatok az els≈ë munkalapon a 10. sort√≥l induljanak, √©s legyen 'Bizonylatsz√°m' nev≈± oszlop."
    )
    
    
    if uploaded_excel_file_minta:
        try:
            st.session_state.df_minta = pd.read_excel(uploaded_excel_file_minta, skiprows=range(1, 9))
            st.session_state.df_minta.columns = list(st.session_state.df_minta.iloc[0])
            st.session_state.df_minta = st.session_state.df_minta.iloc[1:]
            st.session_state.df_minta["Bizonylatsz√°m"] = st.session_state.df_minta["Bizonylatsz√°m"].astype(str)
        except:
            st.warning("‚ùå Nem siker√ºlt beolvasni a Mintav√©tel f√°jlt.")
    
    if len(st.session_state.df_minta) > 0:        
        st.write("‚úÖ **Mintav√©tel bet√∂ltve!** Els≈ë n√©h√°ny sor:")
        st.dataframe(st.session_state.df_minta.head(5))
    
    
    
    # NAV f√°jl
    st.markdown("2) T√∂ltsd fel a **NAV** Excel f√°jlt:")
    uploaded_excel_file_nav = st.file_uploader(
        "üì§ NAV Excel felt√∂lt√©se",
        type=["xlsx"],
        accept_multiple_files=False,
        help="Az adatok az els≈ë munkalapon a 6. sort√≥l induljanak, √©s legyen 'sz√°mlasorsz√°m' nev≈± oszlop."
    )    
    if uploaded_excel_file_nav:
        try:
            st.session_state.df_nav = pd.read_excel(uploaded_excel_file_nav, skiprows=5)
            st.session_state.df_nav["sz√°mlasorsz√°m"] = st.session_state.df_nav["sz√°mlasorsz√°m"].astype(str)
        except:
            st.warning("‚ùå Nem siker√ºlt beolvasni a NAV f√°jlt.")
    
    if len(st.session_state.df_nav) > 0:        
        st.write("‚úÖ **NAV f√°jl bet√∂ltve!** Els≈ë n√©h√°ny sor:")
        st.dataframe(st.session_state.df_nav.head(5))
    
    
    
    # Karton f√°jl
    st.markdown("3) T√∂ltsd fel a **Karton** Excel f√°jlt:")
    uploaded_excel_file_karton = st.file_uploader(
        "üì§ Karton Excel felt√∂lt√©se",
        type=["xlsx", "xls"],
        accept_multiple_files=False,
        help="Az adatok az els≈ë munkalapon az A1 cell√°t√≥l induljanak."
    )    
    
    default_invoice_column_karton = "Bizonylat"
    custom_colname_enabled_karton = st.checkbox("üîß Saj√°t oszlopn√©v megad√°sa a sz√°mlasz√°mhoz a Karton excelben (Alap√©rtelmezett: 'Bizonylat')", value=False)
    
    if custom_colname_enabled_karton:
        invoice_colname_karton = st.text_input("Add meg a sz√°mlasz√°mot tartalmaz√≥ oszlop nev√©t a Karton excelben:", value=default_invoice_column_karton)
    else:
        invoice_colname_karton = default_invoice_column_karton
    
    if uploaded_excel_file_karton:
        try:
            st.session_state.df_karton = pd.read_excel(uploaded_excel_file_karton)
            st.session_state.df_karton[invoice_colname_karton] = st.session_state.df_karton[invoice_colname_karton].astype(str)
        except:
            st.warning("‚ùå Nem siker√ºlt beolvasni a Karton f√°jlt.")
    
    if len(st.session_state.df_karton) > 0:        
        st.write("‚úÖ **Karton bet√∂ltve!** Els≈ë n√©h√°ny sor:")
        st.dataframe(st.session_state.df_karton.head(5))
 
    
st.subheader("üìÇ A kinyert adatok √©s az Excel f√°jlok √∂sszef≈±z√©se")

# √ñsszef≈±z√©s
if len(st.session_state.df_extracted) > 0 and len(st.session_state.df_minta) > 0 and len(st.session_state.df_karton) > 0:
    st.write("4) Kinyert adatok √©s Excel f√°jlok √∂sszef≈±z√©se:")
    if st.button("üîó √ñsszef≈±z√©s"):  
        try:
            df_temp = pd.merge(st.session_state.df_minta, st.session_state.df_extracted, how='outer', left_on='Bizonylatsz√°m', right_on='Sz√°mlasz√°m')
            st.session_state.df_merged = df_temp 
            nr_of_columns = len(df_temp.columns)
            df_temp = pd.merge(df_temp, st.session_state.df_karton, how='left', left_on='Bizonylatsz√°m', right_on=invoice_colname_karton)
            st.session_state.df_merged_full = replace_successive_duplicates(df_temp, 'Bizonylatsz√°m', df_temp.columns[:nr_of_columns])
        except:
            st.warning("‚ùå Hiba t√∂rt√©nt az √∂sszef≈±z√©s sor√°n.")

if len(st.session_state.df_merged) > 0:
    st.write("‚úÖ **√ñsszef≈±z√©s k√©sz!**")
    st.dataframe(st.session_state.df_merged)

    csv = st.session_state.df_merged.to_csv(index=False).encode("utf-8")
    st.download_button("üì• √ñsszef≈±z√∂tt adatok let√∂lt√©se (CSV)", csv, "osszeadott_adatok.csv", "text/csv", key="download-merged-csv")
    
    csv_full = st.session_state.df_merged_full.to_csv(index=False).encode("utf-8")
    st.download_button("üì• Teljes √∂sszef≈±z√∂tt adatok (CSV)", csv_full, "osszeadott_teljes.csv", "text/csv", key="download-merged-full-csv")
    
    buffer = BytesIO()
    with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
        st.session_state.df_merged.to_excel(writer, sheet_name='Munka1', index=False)
        st.session_state.df_merged_full.to_excel(writer, sheet_name='Munka2', index=False)
        writer.close()
        st.download_button(
            label="üì• Let√∂lt√©s Excel form√°tumban",
            data=buffer,
            file_name='osszeadott_adatok.xlsx',
            mime='application/vnd.ms-excel'
        )





local_test = """
df_extracted = pd.read_csv('extract_data.csv')
df_minta = pd.read_excel('Mintav√©tel_k√∂lts√©gek_Sonneveld √©s ellen√Ørz√©s.xlsx', sheet_name='Mintav√©tel', skiprows = range(1, 9))
df_minta.columns = list(df_minta.iloc[0])
df_minta = df_minta.iloc[1:]
df_minta["Bizonylatsz√°m"] = df_minta["Bizonylatsz√°m"].astype(str)
df_karton = pd.read_excel('K√∂nyvel√©si karton 2024_Sonneveld Kft.xlsx', sheet_name='Munka1')

df_temp = pd.merge(df_minta, df_extracted, how='outer', left_on='Bizonylatsz√°m', right_on='Sz√°mlasz√°m')
nr_of_columns = len(df_temp.columns)

df_temp = pd.merge(df_temp, df_karton, how='left', left_on='Bizonylatsz√°m', right_on='Bizonylat')

column_to_compare = 'Bizonylatsz√°m'
columns_to_delete = df_temp.columns[:nr_of_columns]
df_merged = replace_successive_duplicates(df_temp, column_to_compare, columns_to_delete)

"""
